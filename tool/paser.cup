/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;

parser code {:
    Scanner s;
    public Parser(Scanner s){
		this.s=s;
    }
    :}
    
scan with {: return s.next_token(); :};
/* Terminals (tokens returned by the scanner). */
terminal            LineEnd, ADD, MINUS, TIMES, UMINUS, LPAREN, RPAREN,DIVIDE;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left ADD, MINUS;
precedence right TIMES,DIVIDE;
precedence left UMINUS;

/* The grammar rules */

expr_list ::= expr_list expr:e LineEnd         {:System.out.println("ans=\n"+e+"\n");:}  
    		| expr:e LineEnd                           {: System.out.println("ans=\n"+e+"\n");System.out.flush();:}
			;
expr      ::= expr:e1 ADD  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
             %prec UMINUS
             | LPAREN expr:e RPAREN         {: RESULT = e;           :}
             | NUMBER:n                     {: RESULT = n;           :}
             | expr:e1 DIVIDE expr:e2		{: RESULT = e1/e2;:}
             ;